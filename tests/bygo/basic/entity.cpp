#include <bygo/bygo.hpp>

#include <gtest/gtest.h>

TEST(is_equal_test, entity){
    using entity_t = bygo::basic::entity<bygo::shape<3,2,4,2>>;

    constexpr entity_t e1{{
        {
            {{1,2},{3,4},{5,6},{7,8}},
            {{3,4},{1,2},{7,8},{5,6}}
        },
        {
            {{5,6},{1,2},{7,8},{3,4}},
            {{7,8},{3,4},{1,2},{5,6}}
        },
        {
            {{1,2},{5,6},{3,4},{7,8}},
            {{3,4},{1,2},{5,6},{7,8}}
        }
    }};

    constexpr entity_t e2{{
        {
            {{1,2},{3,4},{5,6},{7,8}},
            {{3,4},{1,2},{7,8},{5,6}}
        },
        {
            {{5,6},{1,2},{7,8},{3,4}},
            {{7,8},{3,4},{1,2},{5,6}}
        },
        {
            {{1,2},{5,6},{3,4},{7,8}},
            {{3,4},{1,2},{5,6},{7,8}}
        }
    }};

    ASSERT_TRUE(bygo::aux::is_equal(e1, e2));
}

TEST(is_approx_test, entity){
    using entity_t = bygo::basic::entity<bygo::shape<3,2,4,2>>;

    constexpr entity_t e1{{
        {
            {{1,2},{3,4},{5,6},{7,8}},
            {{3,4},{1,2},{7,8},{5,6}}
        },
        {
            {{5,6},{1,2},{7,8},{3,4}},
            {{7,8},{3,4},{1,2},{5,6}}
        },
        {
            {{1,2},{5,6},{3,4},{7,8}},
            {{3,4},{1,2},{5,6},{7,8}}
        }
    }};

    constexpr entity_t e2{{
        {
            {{1 + 1e-7,2 + 1e-7},{3 + 1e-7,4 + 1e-7},{5 + 1e-7,6 + 1e-7},{7 + 1e-7,8 + 1e-7}},
            {{3 + 1e-7,4 + 1e-7},{1 + 1e-7,2 + 1e-7},{7 + 1e-7,8 + 1e-7},{5 + 1e-7,6 + 1e-7}}
        },
        {
            {{5 + 1e-7,6 + 1e-7},{1 + 1e-7,2 + 1e-7},{7 + 1e-7,8 + 1e-7},{3 + 1e-7,4 + 1e-7}},
            {{7 + 1e-7,8 + 1e-7},{3 + 1e-7,4 + 1e-7},{1 + 1e-7,2 + 1e-7},{5 + 1e-7,6 + 1e-7}}
        },
        {
            {{1 + 1e-7,2 + 1e-7},{5 + 1e-7,6 + 1e-7},{3 + 1e-7,4 + 1e-7},{7 + 1e-7,8 + 1e-7}},
            {{3 + 1e-7,4 + 1e-7},{1 + 1e-7,2 + 1e-7},{5 + 1e-7,6 + 1e-7},{7 + 1e-7,8 + 1e-7}}
        }
    }};

    ASSERT_TRUE(bygo::aux::is_approx(e1, e2, 1e-6));
}

int main(int argc, char** argv){

    ::testing::InitGoogleTest(&argc, argv);
    
    return RUN_ALL_TESTS();
}